#!/usr/bin/env python
import os

def get_state_filename(key):
    return '/tmp/testcase/' + key + '.conf'

def get_current_value(key):
    if key in full_list:
        value = full_list[key]

        if os.path.isfile(get_state_filename(key)):
            # file exists, read current value
            with open(get_state_filename(key), 'r') as content_file:
                content = content_file.read().split('=')
                if len(content) == 2:
                    value = content[1].strip()
    else:
        value = None

    return value

import argparse

full_list = {
    "net.core.somaxconn": "128",
    "net.core.xfrm_acq_expires": "30",
    "net.core.xfrm_aevent_etime": "10",
    "net.core.xfrm_aevent_rseqth": "2",
    "net.core.xfrm_larval_drop": "1",
    "net.ipv4.conf.all.accept_local": "0",
    "net.ipv4.conf.all.force_igmp_version": "0",
    "net.ipv4.conf.all.forwarding": "1",
    "net.ipv4.conf.all.igmpv2_unsolicited_report_interval": "10000",
    "net.ipv4.conf.all.igmpv3_unsolicited_report_interval": "1000",
    "net.ipv4.conf.all.ignore_routes_with_linkdown": "0",
    "net.ipv4.conf.all.log_martians": "0",
    "net.ipv4.conf.all.mc_forwarding": "0",
    "net.ipv4.conf.all.medium_id": "0",
    "net.ipv4.conf.all.promote_secondaries": "0",
    "net.ipv4.conf.all.proxy_arp": "0",
    "net.ipv4.conf.all.proxy_arp_pvlan": "0",
    "net.ipv4.conf.all.route_localnet": "0",
    "net.ipv4.conf.all.rp_filter": "1",
    "net.ipv4.conf.all.secure_redirects": "1",
    "net.ipv4.conf.all.send_redirects": "1",
    "net.ipv4.fib_multipath_hash_policy": "0",
    "net.ipv4.fib_multipath_use_neigh": "0",
    "net.ipv4.fwmark_reflect": "0",
    "net.ipv4.icmp_echo_ignore_all": "0",
    "net.ipv4.icmp_echo_ignore_broadcasts": "1",
    "net.ipv4.icmp_errors_use_inbound_ifaddr": "0",
    "net.ipv4.icmp_ignore_bogus_error_responses": "1",
    "net.ipv4.icmp_ratelimit": "1000",
    "net.ipv4.icmp_ratemask": "6168",
    "net.ipv4.igmp_link_local_mcast_reports": "1",
    "net.ipv4.igmp_max_memberships": "20",
    "net.ipv4.igmp_max_msf": "10",
    "net.ipv4.igmp_qrv": "2",
    "net.ipv4.ip_default_ttl": "64",
    "net.ipv4.ip_dynaddr": "0",
    "net.ipv4.ip_early_demux": "1",
    "net.ipv4.ip_forward": "1",
    "net.ipv4.ip_forward_use_pmtu": "0",
    "net.ipv4.ip_local_port_range": "32768",
    "net.ipv4.ip_local_reserved_ports": "",
    "net.ipv4.ip_no_pmtu_disc": "0",
    "net.ipv4.ip_nonlocal_bind": "0",
    "net.ipv4.ip_unprivileged_port_start": "1024",
    "net.ipv4.ipfrag_high_thresh": "4194304",
    "net.ipv4.ipfrag_low_thresh": "3145728",
    "net.ipv4.ipfrag_max_dist": "64",
    "net.ipv4.ipfrag_time": "30",
    "net.ipv4.ping_group_range": "1",
    "net.ipv4.tcp_base_mss": "1024",
    "net.ipv4.tcp_early_demux": "1",
    "net.ipv4.tcp_ecn": "2",
    "net.ipv4.tcp_ecn_fallback": "1",
    "net.ipv4.tcp_orphan_retries": "0",
    "net.ipv4.tcp_probe_interval": "600",
    "net.ipv4.tcp_probe_threshold": "8",
    "net.ipv4.tcp_reordering": "3",
    "net.ipv4.tcp_retries1": "3",
    "net.ipv4.tcp_retries2": "15",
    "net.ipv4.tcp_sack": "1",
    "net.ipv4.tcp_syn_retries": "6",
    "net.ipv4.tcp_synack_retries": "5",
    "net.ipv4.tcp_syncookies": "1",
    "net.ipv4.tcp_timestamps": "1",
    "net.ipv4.tcp_tw_reuse": "0",
    "net.ipv4.tcp_window_scaling": "1",
    "net.ipv4.udp_l3mdev_accept": "0",
    "net.ipv4.xfrm4_gc_thresh": "2147483647",
    "net.ipv6.anycast_src_echo_reply": "0",
    "net.ipv6.auto_flowlabels": "1",
    "net.ipv6.bindv6only": "0",
    "net.ipv6.conf.all.accept_dad": "1",
    "net.ipv6.conf.all.accept_ra": "1",
    "net.ipv6.conf.all.accept_ra_defrtr": "1",
    "net.ipv6.conf.all.accept_ra_from_local": "0",
    "net.ipv6.conf.all.accept_ra_min_hop_limit": "1",
    "net.ipv6.conf.all.accept_ra_mtu": "1",
    "net.ipv6.conf.all.accept_ra_pinfo": "1",
    "net.ipv6.conf.all.accept_ra_rt_info_max_plen": "0",
    "net.ipv6.conf.all.accept_ra_rt_info_min_plen": "0",
    "net.ipv6.conf.all.accept_ra_rtr_pref": "1",
    "net.ipv6.conf.all.accept_redirects": "1",
    "net.ipv6.conf.all.accept_source_route": "0",
    "net.ipv6.conf.all.addr_gen_mode": "0",
    "net.ipv6.conf.all.autoconf": "1",
    "net.ipv6.conf.all.dad_transmits": "1",
    "net.ipv6.conf.all.disable_ipv6": "1",
    "net.ipv6.conf.all.disable_policy": "0",
    "net.ipv6.conf.all.drop_unicast_in_l2_multicast": "0",
    "net.ipv6.conf.all.drop_unsolicited_na": "0",
    "net.ipv6.conf.all.enhanced_dad": "1",
    "net.ipv6.conf.all.force_mld_version": "0",
    "net.ipv6.conf.all.force_tllao": "0",
    "net.ipv6.conf.all.forwarding": "0",
    "net.ipv6.conf.all.hop_limit": "64",
    "net.ipv6.conf.all.ignore_routes_with_linkdown": "0",
    "net.ipv6.conf.all.keep_addr_on_down": "0",
    "net.ipv6.conf.all.max_addresses": "16",
    "net.ipv6.conf.all.max_desync_factor": "600",
    "net.ipv6.conf.all.mc_forwarding": "0",
    "net.ipv6.conf.all.mldv1_unsolicited_report_interval": "10000",
    "net.ipv6.conf.all.mldv2_unsolicited_report_interval": "1000",
    "net.ipv6.conf.all.mtu": "1280",
    "net.ipv6.conf.all.ndisc_notify": "0",
    "net.ipv6.conf.all.proxy_ndp": "0",
    "net.ipv6.conf.all.regen_max_retry": "3",
    "net.ipv6.conf.all.router_probe_interval": "60",
    "net.ipv6.conf.all.router_solicitation_delay": "1",
    "net.ipv6.conf.all.router_solicitation_interval": "4",
    "net.ipv6.conf.all.router_solicitation_max_interval": "3600",
    "net.ipv6.conf.all.router_solicitations": "-1",
    "net.ipv6.conf.all.seg6_enabled": "0",
    "net.ipv6.conf.all.seg6_require_hmac": "0",
    "net.ipv6.conf.all.suppress_frag_ndisc": "1",
    "net.ipv6.conf.all.temp_prefered_lft": "86400",
    "net.ipv6.conf.all.temp_valid_lft": "604800",
    "net.ipv6.conf.all.use_oif_addrs_only": "0",
    "net.ipv6.conf.all.use_tempaddr": "0",
    "net.ipv6.conf.default.accept_redirects": "1",
    "net.ipv6.conf.default.accept_source_route": "0",
    "net.ipv6.conf.default.addr_gen_mode": "0",
    "net.ipv6.conf.default.autoconf": "1",
    "net.ipv6.conf.default.dad_transmits": "1",
    "net.ipv6.conf.default.disable_ipv6": "1",
    "net.ipv6.conf.default.disable_policy": "0",
    "net.ipv6.conf.default.drop_unicast_in_l2_multicast": "0",
    "net.ipv6.conf.default.drop_unsolicited_na": "0",
    "net.ipv6.conf.default.enhanced_dad": "1",
    "net.ipv6.conf.default.force_mld_version": "0",
    "net.ipv6.conf.default.force_tllao": "0",
    "net.ipv6.conf.default.forwarding": "0",
    "net.ipv6.conf.default.hop_limit": "64",
    "net.ipv6.conf.default.ignore_routes_with_linkdown": "0",
    "net.ipv6.conf.default.temp_prefered_lft": "86400",
    "net.ipv6.conf.default.temp_valid_lft": "604800",
    "net.ipv6.conf.default.use_oif_addrs_only": "0",
    "net.ipv6.conf.default.use_tempaddr": "0",
    "net.ipv6.fwmark_reflect": "0",
    "net.ipv6.icmp.ratelimit": "1000",
    "net.ipv6.idgen_delay": "1",
    "net.ipv6.idgen_retries": "3",
    "net.ipv6.ip6frag_high_thresh": "4194304",
    "net.ipv6.ip6frag_low_thresh": "3145728",
    "net.ipv6.ip6frag_time": "60",
    "net.ipv6.ip_nonlocal_bind": "0",
    "net.ipv6.route.gc_timeout": "60",
    "net.ipv6.route.max_size": "4096",
    "net.ipv6.route.min_adv_mss": "1220",
    "net.ipv6.route.mtu_expires": "600",
    "net.ipv6.xfrm6_gc_thresh": "2147483647",
    "net.ipv4.conf.all.accept_source_route": "1",
    "bogus.mismatch.value": "666"
}


parser = argparse.ArgumentParser(description='Mock sysctl for acceptance testing')
parser.add_argument('key', metavar='KEY', nargs='?',
                    help='display current value of a key')
parser.add_argument('-a', action='store_true', help='print all settings')
parser.add_argument('-w', metavar='foo', help='write a setting')
args = parser.parse_args()


if args.key:
    # current value of a setting
    if args.key in full_list:
        print get_current_value(args.key)
    else:
        # generate same error as real command if not in our limited test data
        procfs_path = "/proc/sys/" + args.key.replace(".", "/")
        print "sysctl: cannot stat %s: No such file or directory" % (procfs_path)

elif args.a:
    # current value of ALL settings
    for key, value in full_list.iteritems():
        value = get_current_value(key)
        print "%s=%s" % (key, value)
elif args.w:
    # write a value
    key=args.w.split('=')[0]
    value=args.w.split('=')[1]
    if key == "net.ipv4.route.flush":
        with open('/tmp/testcase/flush_ipv4', 'w') as f:
            f.write("flushed")
    elif key == "net.ipv6.route.flush":
        with open('/tmp/testcase/flush_ipv6', 'w') as f:
            f.write("flushed")
    else:
        print "saving %s --> %s" % (key, value)
        with open(get_state_filename(key), "w") as f:
            f.write("%s=%s" % (key, value))
else:
    print "error - invalid command line for mock sysctl"
